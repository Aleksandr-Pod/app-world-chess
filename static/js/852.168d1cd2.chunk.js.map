{"version":3,"file":"static/js/852.168d1cd2.chunk.js","mappings":"qOAGaA,EAAgBC,EAAAA,EAAAA,IAAH,oRAO6DC,GAG1EC,EAAeF,EAAAA,EAAAA,IAAH,oP,SCFzB,EATuB,SAAC,GAAuB,IAArBG,EAAoB,EAApBA,SACtB,OACI,UAACJ,EAAD,YACI,SAACG,EAAD,IACCC,IAGZ,C,8ECNYC,GAAgBJ,EAAAA,EAAAA,GAAOK,EAAAA,EAAPL,EACzB,gBAAGM,EAAH,EAAGA,MAAOC,EAAV,EAAUA,IAAV,2LAQiB,SAARA,EAAiBD,EAAME,OAAOC,OAASH,EAAME,OAAOE,MAR7D,+BASuB,SAARH,EAAiBD,EAAME,OAAOC,OAASH,EAAME,OAAOG,MATnE,oCAU4B,SAARJ,EAAiBD,EAAME,OAAOE,MAAQJ,EAAME,OAAOG,MAVvE,uDAYgC,SAARJ,EAAiBD,EAAME,OAAOI,WAAaN,EAAME,OAAOK,WAZhF,gB,gNCFSC,EAAad,EAAAA,EAAAA,IAAH,+kBAaC,qBAAGM,MAAuBE,OAAOE,KAAjC,IAeXK,EAAcf,EAAAA,EAAAA,KAAH,qIAQXgB,EAAahB,EAAAA,EAAAA,IAAH,uFACV,qBAAGM,MAAuBE,OAAOS,KAAjC,IAKAC,EAAWlB,EAAAA,EAAAA,IAAH,6IAQRmB,EAAwB,CACjCC,MAAO,WAGEC,EAAYrB,EAAAA,EAAAA,IAAH,+M,yFCtDTsB,EAAQtB,EAAAA,EAAAA,GAAH,gTAsBLuB,EAAiBvB,EAAAA,EAAAA,IAAH,yF,SCb3B,EARiB,WACb,OACI,SAACuB,EAAD,WACI,SAACD,EAAD,2BAGX,C,4FCPYE,GAAcC,EAAAA,EAAAA,MAASC,MAAM,CACtCC,OAAOC,EAAAA,EAAAA,MAASD,MAAM,iBAAiBE,SAAS,0BAChDC,UAAUF,EAAAA,EAAAA,MACLG,IAAI,EAAG,2CACPC,IAAI,GAAI,4CACRH,SAAS,+BAGLI,GAAiBR,EAAAA,EAAAA,MAASC,MAAM,CACzCQ,WAAWN,EAAAA,EAAAA,MACNG,IAAI,EAAG,uCACPC,IAAI,GAAI,wCACRH,SAAS,yBACdC,UAAUF,EAAAA,EAAAA,MACLG,IAAI,EAAG,2CACPC,IAAI,GAAI,4CACRH,SAAS,6BACdM,eAAeP,EAAAA,EAAAA,MACVG,IAAI,EAAG,2CACPC,IAAI,GAAI,4CACRH,SAAS,6BACdF,OAAOC,EAAAA,EAAAA,MAASD,MAAM,iBAAiBE,SAAS,2B,gPCrBpD,GAAeO,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,qLACD,c,2DCFSC,E,OAAqBvC,EAAAA,IAAH,+kBAYP,qBAAGM,MAAuBE,OAAOE,KAAjC,IAgBXS,EAAwB,CACjCC,MAAO,WCiKX,EAnLqB,WACjB,OAAwCoB,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAAqBC,EAAAA,EAAAA,MAAdC,GAAP,eACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAA0B,kBAAMP,GAAiBD,EAAvB,EAE1BS,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CAAElB,UAAW,GAAIJ,SAAU,GAAIH,MAAO,GAAIQ,cAAe,IACxEkB,iBAAkBpB,EAAAA,EAClBqB,SAAS,WAAD,8BAAE,WAAOC,GAAP,mFACNX,GAAY,GACRW,EAAOzB,WAAayB,EAAOpB,gBAC3BqB,EAAAA,GAAAA,MAAY,0BACZZ,GAAY,IAJV,kBAOyBE,EAAW,CAClCW,KAAMF,EAAOrB,UACbJ,SAAUyB,EAAOzB,SACjBH,MAAO4B,EAAO5B,QAVhB,YAOI+B,EAPJ,QAYUzC,MAZV,wBAaEuC,EAAAA,GAAAA,MAAY,oBACZZ,GAAY,GAdd,2BAiBEc,EAAQC,KAAKF,OACbD,EAAAA,GAAAA,QAAc,iCACdT,EAAS,SAAU,CAAEa,SAAS,KAnBhC,kDAsBFC,QAAQC,IAAR,MAtBE,QAwBNlB,GAAY,GAxBN,0DAAF,mDAAC,KA4Bb,OACI,UAACL,EAAD,YACI,SAACwB,EAAA,EAAD,KACA,UAAC,KAAD,CAAaT,SAAUJ,EAAOc,aAA9B,WACI,UAAC,KAAD,YACI,SAACC,EAAA,EAAD,CAAYC,QAAQ,QAApB,SACKhB,EAAOiB,QAAQxC,OAASuB,EAAOkB,OAAOzC,OACnC,SAAC,KAAD,UAAauB,EAAOkB,OAAOzC,QAC3B,QAER,SAAC0C,EAAA,EAAD,CACIC,WAAS,EACTC,QAAS,WACT1C,UAAQ,EACR2C,GAAG,QACHf,KAAK,QACLgB,KAAK,QACLC,SAAUxB,EAAOyB,aACjBC,MAAO1B,EAAOK,OAAO5B,MACrBkD,YAAa,gBACbC,WAAY,CACRC,gBACI,SAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,UACI,SAACC,EAAA,EAAD,CAAMC,GAAI,CAAE/D,MAAO,UAAWgE,GAAI,kBAMtD,UAAC,KAAD,YACI,SAACnB,EAAA,EAAD,CAAYC,QAAQ,WAApB,SACKhB,EAAOiB,QAAQrC,UAAYoB,EAAOkB,OAAOtC,UACtC,SAAC,KAAD,UAAaoB,EAAOkB,OAAOtC,WAC3B,QAER,SAACuC,EAAA,EAAD,CACIC,WAAS,EACTC,QAAS,WACT1C,UAAQ,EACR2C,GAAG,WACHf,KAAK,WACLgB,KAAMhC,EAAe,OAAS,WAC9BiC,SAAUxB,EAAOyB,aACjBC,MAAO1B,EAAOK,OAAOzB,SACrB+C,YAAa,WACbC,WAAY,CACRC,gBACI,SAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,UACI,SAACI,EAAA,EAAD,CAAMF,GAAI,CAAE/D,MAAO,UAAWgE,GAAI,WAG1CE,cACI,SAACN,EAAA,EAAD,CAAgBC,SAAS,MAAzB,UACI,SAACM,EAAA,EAAD,CACI,aAAW,6BACXC,QAASvC,EAFb,SAIKR,GAAe,SAACgD,EAAA,EAAD,KAAiB,SAACC,EAAA,EAAD,CAAeP,GAAIhE,eAO5E,UAAC,KAAD,YACI,SAAC8C,EAAA,EAAD,CAAYC,QAAQ,gBAApB,SACKhB,EAAOiB,QAAQhC,eAAiBe,EAAOkB,OAAOjC,eAC3C,SAAC,KAAD,UAAae,EAAOkB,OAAOjC,gBAC3B,QAER,SAACkC,EAAA,EAAD,CACIC,WAAS,EACTC,QAAS,WACT1C,UAAQ,EACR2C,GAAG,gBACHf,KAAK,gBACLgB,KAAMhC,EAAe,OAAS,WAC9BiC,SAAUxB,EAAOyB,aACjBC,MAAO1B,EAAOK,OAAOpB,cACrB0C,YAAa,mBACbC,WAAY,CACRC,gBACI,SAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,UACI,SAACI,EAAA,EAAD,CAAMF,GAAI,CAAE/D,MAAO,UAAWgE,GAAI,WAG1CE,cACI,SAACN,EAAA,EAAD,CAAgBC,SAAS,MAAzB,UACI,SAACM,EAAA,EAAD,CACI,aAAW,6BACXC,QAASvC,EAFb,SAIKR,GAAe,SAACgD,EAAA,EAAD,KAAiB,SAACC,EAAA,EAAD,CAAeP,GAAIhE,eAO5E,UAAC,KAAD,YACI,SAAC8C,EAAA,EAAD,CAAYC,QAAQ,YAApB,SACKhB,EAAOiB,QAAQjC,WAAagB,EAAOkB,OAAOlC,WACvC,SAAC,KAAD,UAAagB,EAAOkB,OAAOlC,YAC3B,QAER,SAACmC,EAAA,EAAD,CACIC,WAAS,EACTC,QAAS,WACTC,GAAG,YACHf,KAAK,YACLgB,KAAK,OACLC,SAAUxB,EAAOyB,aACjBC,MAAO1B,EAAOK,OAAOrB,UACrB2C,YAAa,aACbC,WAAY,CACRC,gBACI,SAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,UACI,SAACU,EAAD,CAAYR,GAAI,CAAE/D,MAAO,UAAWgE,GAAI,kBAM5D,UAAC,KAAD,YACI,SAAC,IAAD,CAAeb,QAAS,YAAahE,IAAK,SAAUoC,SAAUA,EAAU8B,KAAK,SAA7E,uBAGA,SAAC,IAAD,CACIlE,IAAK,OACLgE,QAAS,WACTiB,QAAS,kBAAMzC,EAAS,SAAU,CAAEa,SAAS,GAApC,EAHb,4BAWnB,E,UClLD,EARqB,WACjB,OACI,SAACgC,EAAA,EAAD,WACI,SAAC,EAAD,KAGX,C","sources":["components/backgroundPage/BackgroundPage.styled.tsx","components/backgroundPage/BackgroundPage.tsx","components/generalButton/GeneralButton.styled.tsx","components/loginForm/LoginForm.styled.tsx","components/titleApp/TitleApp.styled.tsx","components/titleApp/TitleApp.tsx","helpers/validationForm.ts","../node_modules/@mui/icons-material/esm/AccountBox.js","components/registerForm/RegisterForm.styled.tsx","components/registerForm/RegisterForm.tsx","views/registerPage/RegisterPage.tsx"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport chess from \"../../images/chess.jpg\";\n\nexport const BackgroundBox = styled.div`\n    background-color: #4a4f5a;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    background-image: linear-gradient(rgba(0, 0, 0, 0.31), rgba(0, 0, 0, 0.31)), url(${chess});\n`;\n\nexport const BlurMainPage = styled.div`\n    width: 100%;\n    height: 100%;\n    background: rgba(255, 255, 255, 0.01);\n    backdrop-filter: blur(5px);\n    z-index: 1;\n    position: fixed;\n    top: 0;\n    right: 0;\n    width: 100vw;\n    height: 100vh;\n`;\n","import { BackgroundBox, BlurMainPage } from \"./BackgroundPage.styled\";\n\nconst BackgroundPage = ({ children }: any) => {\n    return (\n        <BackgroundBox>\n            <BlurMainPage />\n            {children}\n        </BackgroundBox>\n    );\n};\n\nexport default BackgroundPage;\n","import styled from \"@emotion/styled\";\nimport { Button } from \"@mui/material\";\n\nexport const GeneralButton = styled(Button)(\n    ({ theme, bts }: any) => `\n    border-radius: 20px;\n    width: 100%;\n    font-weight: 400;\n    font-size: 18px;\n    line-height: 27px;\n    height: 50px;\n    margin-bottom: 20px;\n    color: ${bts === \"link\" ? theme.colors.accent : theme.colors.white};\n    border-color:${bts === \"link\" ? theme.colors.accent : theme.colors.green};\n    background-color: ${bts === \"link\" ? theme.colors.white : theme.colors.green};\n     :hover {\n        background-color: ${bts === \"link\" ? theme.colors.hoverWhite : theme.colors.hoverGreen};\n    }\n`\n);\n","import styled from \"@emotion/styled\";\n\nexport const ModalForma = styled.div`\n    position: absolute;\n    z-index: 25;\n    top: 0;\n    left: 0;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n\n    width: 100vw;\n    height: 100vh;\n    padding: 20px;\n    background-color: ${({ theme }: any) => theme.colors.white};\n    @media (min-width: 768px) {\n        position: relative;\n        margin-left: auto;\n        margin-right: auto;\n        border-radius: 20px;\n        padding: 40px;\n        width: 533px;\n        height: 468px;\n    }\n    /* @media (min-width: 1280px) {\n        margin-left: 107px;\n    } */\n`;\n\nexport const FormaCastom = styled.form`\n    max-width: 280px;\n    margin-top: 20px;\n    @media (min-width: 768px) {\n        width: 410px;\n    }\n`;\n\nexport const ErrorLabel = styled.div`\n    color: ${({ theme }: any) => theme.colors.error};\n    font-size: 14px;\n    margin-left: 10px;\n`;\n\nexport const InputBox = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: end;\n    margin-top: 40px;\n    width: 100%;\n`;\n\nexport const ShowPasswordBtnStyles = {\n    color: \"#E0E0E0\",\n};\n\nexport const BoxButton = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 42px;\n    @media (min-width: 768px) {\n        width: 300px;\n    }\n`;\n","import styled from \"@emotion/styled\";\n\nexport const Title = styled.h1`\n    display: flex;\n    align-items: center;\n    margin: 0;\n    font-weight: 700;\n    font-family: \"Poppins\";\n    font-size: 24px;\n    line-height: 1.46;\n    @media (min-width: 768px) {\n        font-weight: 700;\n        font-size: 30px;\n        line-height: 1.5;\n    }\n`;\n\n// export const Svg = styled.svg`\n//     height: 30px;\n//     @media (min-width: 768px) {\n//         height: 40px;\n//     }\n// `;\n\nexport const TitleContainer = styled.div`\n    display: flex;\n    align-items: center;\n    height: 40px;\n`;\n","import React from \"react\";\nimport { Title, TitleContainer } from \"./TitleApp.styled\";\n\nconst TitleApp = () => {\n    return (\n        <TitleContainer>\n            <Title>Chess-World</Title>\n        </TitleContainer>\n    );\n};\n\nexport default TitleApp;\n","import { object, string } from \"yup\";\n\nexport const loginSchema = object().shape({\n    email: string().email(\"Invalid email\").required(\"Email must by required\"),\n    password: string()\n        .min(6, \"Password must be longer than 6 letters!\")\n        .max(18, \"Password must be shorts than 18 letters!\")\n        .required(\"Password must by required\"),\n});\n\nexport const registerSchema = object().shape({\n    firstName: string()\n        .min(2, \"Name must be longer than 2 letters!\")\n        .max(30, \"Name must be shorts than 30 letters!\")\n        .required(\"Name must by required\"),\n    password: string()\n        .min(6, \"Password must be longer than 6 letters!\")\n        .max(18, \"Password must be shorts than 18 letters!\")\n        .required(\"Password must by required\"),\n    dublePassword: string()\n        .min(6, \"Password must be longer than 6 letters!\")\n        .max(18, \"Password must be shorts than 18 letters!\")\n        .required(\"Password must by required\"),\n    email: string().email(\"Invalid email\").required(\"Email must by required\"),\n});\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 5v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2H5c-1.11 0-2 .9-2 2zm12 4c0 1.66-1.34 3-3 3s-3-1.34-3-3 1.34-3 3-3 3 1.34 3 3zm-9 8c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1H6v-1z\"\n}), 'AccountBox');","import styled from \"@emotion/styled\";\n\nexport const RegisterModalForma = styled.div`\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    top: 0;\n    left: 0;\n    z-index: 25;\n    width: 100vw;\n    height: 100vh;\n    padding: 20px;\n    background-color: ${({ theme }: any) => theme.colors.white};\n    @media (min-width: 768px) {\n        position: relative;\n        margin-left: auto;\n        margin-right: auto;\n        padding: 40px;\n        width: 533px;\n        height: 616px;\n        border-radius: 20px;\n    }\n\n    /* @media (min-width: 1280px) {\n        margin-left: 107px;\n    } */\n`;\n\nexport const ShowPasswordBtnStyles = {\n    color: \"#E0E0E0\",\n};\n","import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useFormik } from \"formik\";\nimport { toast } from \"react-toastify\";\nimport { TextField, InputLabel, InputAdornment, IconButton } from \"@mui/material\";\nimport { Mail, Lock, AccountBox, Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport { useRegistrationUserMutation } from \"redux/authAPI\";\nimport { registerSchema } from \"helpers/validationForm\";\nimport { GeneralButton } from \"components/generalButton/GeneralButton.styled\";\nimport TitleApp from \"components/titleApp/TitleApp\";\nimport { BoxButton, InputBox, FormaCastom, ErrorLabel } from \"../loginForm/LoginForm.styled\";\nimport { RegisterModalForma, ShowPasswordBtnStyles } from \"./RegisterForm.styled\";\n\nconst RegisterForm = () => {\n    const [showPassword, setShowPassword] = useState(false);\n    const [disabled, setDisabled] = useState(false);\n    const [createUser] = useRegistrationUserMutation();\n    const navigate = useNavigate();\n\n    const handleClickShowPassword = () => setShowPassword(!showPassword);\n\n    const formik = useFormik({\n        initialValues: { firstName: \"\", password: \"\", email: \"\", dublePassword: \"\" },\n        validationSchema: registerSchema,\n        onSubmit: async (values) => {\n            setDisabled(true);\n            if (values.password !== values.dublePassword) {\n                toast.error(\"Passwords do not match\");\n                setDisabled(false);\n            }\n            try {\n                const respons: any = await createUser({\n                    name: values.firstName,\n                    password: values.password,\n                    email: values.email,\n                });\n                if (respons.error) {\n                    toast.error(\"User not created\");\n                    setDisabled(false);\n                    return;\n                }\n                if (respons.data.name) {\n                    toast.success(\"User created! Login please...\");\n                    navigate(\"/login\", { replace: true });\n                }\n            } catch (error) {\n                console.log(error);\n            }\n            setDisabled(false);\n        },\n    });\n\n    return (\n        <RegisterModalForma>\n            <TitleApp />\n            <FormaCastom onSubmit={formik.handleSubmit}>\n                <InputBox>\n                    <InputLabel htmlFor=\"email\">\n                        {formik.touched.email && formik.errors.email ? (\n                            <ErrorLabel>{formik.errors.email}</ErrorLabel>\n                        ) : null}\n                    </InputLabel>\n                    <TextField\n                        fullWidth\n                        variant={\"standard\"}\n                        required\n                        id=\"email\"\n                        name=\"email\"\n                        type=\"email\"\n                        onChange={formik.handleChange}\n                        value={formik.values.email}\n                        placeholder={\"Email Address\"}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <Mail sx={{ color: \"#E0E0E0\", ml: \"7px\" }} />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                </InputBox>\n                <InputBox>\n                    <InputLabel htmlFor=\"password\">\n                        {formik.touched.password && formik.errors.password ? (\n                            <ErrorLabel>{formik.errors.password}</ErrorLabel>\n                        ) : null}\n                    </InputLabel>\n                    <TextField\n                        fullWidth\n                        variant={\"standard\"}\n                        required\n                        id=\"password\"\n                        name=\"password\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        onChange={formik.handleChange}\n                        value={formik.values.password}\n                        placeholder={\"Password\"}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <Lock sx={{ color: \"#E0E0E0\", ml: \"7px\" }} />\n                                </InputAdornment>\n                            ),\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <IconButton\n                                        aria-label=\"toggle password visibility\"\n                                        onClick={handleClickShowPassword}\n                                    >\n                                        {showPassword ? <Visibility /> : <VisibilityOff sx={ShowPasswordBtnStyles} />}\n                                    </IconButton>\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                </InputBox>\n                <InputBox>\n                    <InputLabel htmlFor=\"dublePassword\">\n                        {formik.touched.dublePassword && formik.errors.dublePassword ? (\n                            <ErrorLabel>{formik.errors.dublePassword}</ErrorLabel>\n                        ) : null}\n                    </InputLabel>\n                    <TextField\n                        fullWidth\n                        variant={\"standard\"}\n                        required\n                        id=\"dublePassword\"\n                        name=\"dublePassword\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        onChange={formik.handleChange}\n                        value={formik.values.dublePassword}\n                        placeholder={\"Confirm password\"}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <Lock sx={{ color: \"#E0E0E0\", ml: \"7px\" }} />\n                                </InputAdornment>\n                            ),\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <IconButton\n                                        aria-label=\"toggle password visibility\"\n                                        onClick={handleClickShowPassword}\n                                    >\n                                        {showPassword ? <Visibility /> : <VisibilityOff sx={ShowPasswordBtnStyles} />}\n                                    </IconButton>\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                </InputBox>\n                <InputBox>\n                    <InputLabel htmlFor=\"firstName\">\n                        {formik.touched.firstName && formik.errors.firstName ? (\n                            <ErrorLabel>{formik.errors.firstName}</ErrorLabel>\n                        ) : null}\n                    </InputLabel>\n                    <TextField\n                        fullWidth\n                        variant={\"standard\"}\n                        id=\"firstName\"\n                        name=\"firstName\"\n                        type=\"text\"\n                        onChange={formik.handleChange}\n                        value={formik.values.firstName}\n                        placeholder={\"First Name\"}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <AccountBox sx={{ color: \"#E0E0E0\", ml: \"7px\" }} />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                </InputBox>\n                <BoxButton>\n                    <GeneralButton variant={\"contained\"} bts={\"submit\"} disabled={disabled} type=\"submit\">\n                        Register\n                    </GeneralButton>\n                    <GeneralButton\n                        bts={\"link\"}\n                        variant={\"outlined\"}\n                        onClick={() => navigate(\"/login\", { replace: true })}\n                    >\n                        Log in\n                    </GeneralButton>\n                </BoxButton>\n            </FormaCastom>\n        </RegisterModalForma>\n    );\n};\n\nexport default RegisterForm;\n","import React from \"react\";\nimport RegisterForm from \"components/registerForm/RegisterForm\";\nimport BackgroundPage from \"components/backgroundPage/BackgroundPage\";\n\nconst RegisterPage = () => {\n    return (\n        <BackgroundPage>\n            <RegisterForm />\n        </BackgroundPage>\n    );\n};\n\nexport default RegisterPage;\n"],"names":["BackgroundBox","styled","chess","BlurMainPage","children","GeneralButton","Button","theme","bts","colors","accent","white","green","hoverWhite","hoverGreen","ModalForma","FormaCastom","ErrorLabel","error","InputBox","ShowPasswordBtnStyles","color","BoxButton","Title","TitleContainer","loginSchema","object","shape","email","string","required","password","min","max","registerSchema","firstName","dublePassword","createSvgIcon","_jsx","d","RegisterModalForma","useState","showPassword","setShowPassword","disabled","setDisabled","useRegistrationUserMutation","createUser","navigate","useNavigate","handleClickShowPassword","formik","useFormik","initialValues","validationSchema","onSubmit","values","toast","name","respons","data","replace","console","log","TitleApp","handleSubmit","InputLabel","htmlFor","touched","errors","TextField","fullWidth","variant","id","type","onChange","handleChange","value","placeholder","InputProps","startAdornment","InputAdornment","position","Mail","sx","ml","Lock","endAdornment","IconButton","onClick","Visibility","VisibilityOff","AccountBox","BackgroundPage"],"sourceRoot":""}